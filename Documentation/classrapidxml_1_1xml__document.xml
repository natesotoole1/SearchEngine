<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="classrapidxml_1_1xml__document" kind="class" language="C++" prot="public">
    <compoundname>rapidxml::xml_document</compoundname>
    <basecompoundref refid="classrapidxml_1_1xml__node" prot="public" virt="non-virtual">rapidxml::xml_node&lt; Ch &gt;</basecompoundref>
    <basecompoundref refid="classrapidxml_1_1memory__pool" prot="public" virt="non-virtual">rapidxml::memory_pool&lt; Ch &gt;</basecompoundref>
    <includes refid="rapidxml_8hpp" local="no">rapidxml.hpp</includes>
    <innerclass refid="structrapidxml_1_1xml__document_1_1attribute__name__pred" prot="private">rapidxml::xml_document::attribute_name_pred</innerclass>
    <innerclass refid="structrapidxml_1_1xml__document_1_1attribute__value__pred" prot="private">rapidxml::xml_document::attribute_value_pred</innerclass>
    <innerclass refid="structrapidxml_1_1xml__document_1_1attribute__value__pure__pred" prot="private">rapidxml::xml_document::attribute_value_pure_pred</innerclass>
    <innerclass refid="structrapidxml_1_1xml__document_1_1node__name__pred" prot="private">rapidxml::xml_document::node_name_pred</innerclass>
    <innerclass refid="structrapidxml_1_1xml__document_1_1text__pred" prot="private">rapidxml::xml_document::text_pred</innerclass>
    <innerclass refid="structrapidxml_1_1xml__document_1_1text__pure__no__ws__pred" prot="private">rapidxml::xml_document::text_pure_no_ws_pred</innerclass>
    <innerclass refid="structrapidxml_1_1xml__document_1_1text__pure__with__ws__pred" prot="private">rapidxml::xml_document::text_pure_with_ws_pred</innerclass>
    <innerclass refid="structrapidxml_1_1xml__document_1_1whitespace__pred" prot="private">rapidxml::xml_document::whitespace_pred</innerclass>
    <templateparamlist>
      <param>
        <type>class Ch</type>
        <defval>char</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1aae8841b15085ba8f32ff46587ace28f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rapidxml::xml_document&lt; Ch &gt;::xml_document</definition>
        <argsstring>()</argsstring>
        <name>xml_document</name>
        <briefdescription>
<para>Constructs empty XML document. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1364" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1364" bodyend="1367"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rapidxml::xml_document&lt; Ch &gt;::parse</definition>
        <argsstring>(Ch *text)</argsstring>
        <name>parse</name>
        <param>
          <type>Ch *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses zero-terminated XML string according to given flags. Passed string will be modified by the parser, unless <ref refid="namespacerapidxml_1a45d4d8fef551beaaba23a83b847fd6a3" kindref="member">rapidxml::parse_non_destructive</ref> flag is used. The string must persist for the lifetime of the document. In case of error, <ref refid="classrapidxml_1_1parse__error" kindref="compound">rapidxml::parse_error</ref> exception will be thrown. <linebreak/>
<linebreak/>
 If you want to parse contents of a file, you must first load the file into the memory, and pass pointer to its beginning. Make sure that data is zero-terminated. <linebreak/>
<linebreak/>
 Document can be parsed into multiple times. Each new call to parse removes previous nodes and attributes (if any), but does not clear memory pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>XML data to parse; pointer is non-const to denote fact that this data may be modified by the parser. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1381" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1381" bodyend="1411"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1a826929ff54242532198701f19ff5f83f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_document&lt; Ch &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears the document by deleting all nodes and clearing the memory pool. All nodes owned by document pool are destroyed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1415" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1415" bodyend="1420"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a2c6a4315b98bcfa2e04fed3fa1b22c36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7c" kindref="member">node_type</ref></type>
        <definition>node_type rapidxml::xml_node&lt; Ch &gt;::type</definition>
        <argsstring>() const </argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets type of node. <simplesect kind="return"><para>Type of node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="913" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="913" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a499bbc9300c1b06821d5c08b24164c68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::type</definition>
        <argsstring>(node_type type)</argsstring>
        <name>type</name>
        <param>
          <type><ref refid="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7c" kindref="member">node_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets type of node. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of node to set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1065" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1065" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1adb6ad21a4590cf13d4a6a5036e3cdbbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__document" kindref="compound">xml_document</ref>&lt; Ch &gt; *</type>
        <definition>xml_document&lt;Ch&gt;* rapidxml::xml_node&lt; Ch &gt;::document</definition>
        <argsstring>() const </argsstring>
        <name>document</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets document of which node is a child. <simplesect kind="return"><para>Pointer to document that contains this node, or 0 if there is no parent document. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="923" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="923" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_node&lt; Ch &gt;::first_node</definition>
        <argsstring>(const Ch *name=0, std::size_t name_size=0, bool case_sensitive=true) const </argsstring>
        <name>first_node</name>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>name_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets first child node, optionally matching node name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of child to find, or 0 to return first child regardless of its name; this string doesn&apos;t have to be zero-terminated if name_size is non-zero </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of name, in characters, or 0 to have size calculated automatically from string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>case_sensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to found child, or 0 if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="936" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="936" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a2ace550c18cf10da6303773972d7157f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_node&lt; Ch &gt;::last_node</definition>
        <argsstring>(const Ch *name=0, std::size_t name_size=0, bool case_sensitive=true) const </argsstring>
        <name>last_node</name>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>name_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets last child node, optionally matching node name. Behaviour is undefined if node has no children. Use <ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node()</ref> to test if node has children. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of child to find, or 0 to return last child regardless of its name; this string doesn&apos;t have to be zero-terminated if name_size is non-zero </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of name, in characters, or 0 to have size calculated automatically from string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>case_sensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to found child, or 0 if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="958" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="958" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a001ece4e227eebbd6ad0ec7dacf1c00b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_node&lt; Ch &gt;::previous_sibling</definition>
        <argsstring>(const Ch *name=0, std::size_t name_size=0, bool case_sensitive=true) const </argsstring>
        <name>previous_sibling</name>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>name_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets previous sibling node, optionally matching node name. Behaviour is undefined if node has no parent. Use <ref refid="classrapidxml_1_1xml__base_1a7f31ae930f93852830234db1ae59c4c4" kindref="member">parent()</ref> to test if node has a parent. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of sibling to find, or 0 to return previous sibling regardless of its name; this string doesn&apos;t have to be zero-terminated if name_size is non-zero </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of name, in characters, or 0 to have size calculated automatically from string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>case_sensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to found sibling, or 0 if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="981" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="981" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1ac59af4dd5f0ec715753e42467dff6aed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_node&lt; Ch &gt;::next_sibling</definition>
        <argsstring>(const Ch *name=0, std::size_t name_size=0, bool case_sensitive=true) const </argsstring>
        <name>next_sibling</name>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>name_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets next sibling node, optionally matching node name. Behaviour is undefined if node has no parent. Use <ref refid="classrapidxml_1_1xml__base_1a7f31ae930f93852830234db1ae59c4c4" kindref="member">parent()</ref> to test if node has a parent. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of sibling to find, or 0 to return next sibling regardless of its name; this string doesn&apos;t have to be zero-terminated if name_size is non-zero </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of name, in characters, or 0 to have size calculated automatically from string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>case_sensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to found sibling, or 0 if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1004" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1004" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1ae426802be58114ffc41bf30ac6b8c37d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__attribute" kindref="compound">xml_attribute</ref>&lt; Ch &gt; *</type>
        <definition>xml_attribute&lt;Ch&gt;* rapidxml::xml_node&lt; Ch &gt;::first_attribute</definition>
        <argsstring>(const Ch *name=0, std::size_t name_size=0, bool case_sensitive=true) const </argsstring>
        <name>first_attribute</name>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>name_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets first attribute of node, optionally matching attribute name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of attribute to find, or 0 to return first attribute regardless of its name; this string doesn&apos;t have to be zero-terminated if name_size is non-zero </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of name, in characters, or 0 to have size calculated automatically from string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>case_sensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to found attribute, or 0 if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1025" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1025" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a50c03f2db3fa51f27a73d86ec29a49d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__attribute" kindref="compound">xml_attribute</ref>&lt; Ch &gt; *</type>
        <definition>xml_attribute&lt;Ch&gt;* rapidxml::xml_node&lt; Ch &gt;::last_attribute</definition>
        <argsstring>(const Ch *name=0, std::size_t name_size=0, bool case_sensitive=true) const </argsstring>
        <name>last_attribute</name>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>name_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets last attribute of node, optionally matching attribute name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of attribute to find, or 0 to return last attribute regardless of its name; this string doesn&apos;t have to be zero-terminated if name_size is non-zero </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of name, in characters, or 0 to have size calculated automatically from string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>case_sensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to found attribute, or 0 if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1045" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1045" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1ae86e92908c3eab40bbed8216e4f3f3cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::prepend_node</definition>
        <argsstring>(xml_node&lt; Ch &gt; *child)</argsstring>
        <name>prepend_node</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepends a new child node. The prepended child becomes the first child, and all existing children are moved one position back. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>Node to prepend. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1076" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1076" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a8696d098ecc9c4d2a646b43e91d58e31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::append_node</definition>
        <argsstring>(xml_node&lt; Ch &gt; *child)</argsstring>
        <name>append_node</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends a new child node. The appended child becomes the last child. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>Node to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1097" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1097" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a666880f42a7e486d78cc45ed51c7c46d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::insert_node</definition>
        <argsstring>(xml_node&lt; Ch &gt; *where, xml_node&lt; Ch &gt; *child)</argsstring>
        <name>insert_node</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>where</declname>
        </param>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts a new child node at specified place inside the node. All children after and including the specified node are moved one position back. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>Place where to insert the child, or 0 to insert at the back. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>Node to insert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1119" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1119" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a62bf7b276cf7a651a3337f5e0a0ef6ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::remove_first_node</definition>
        <argsstring>()</argsstring>
        <name>remove_first_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes first child node. If node has no children, behaviour is undefined. Use <ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node()</ref> to test if node has children. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1140" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1140" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a9182512e948ec451a83f116cce7c7674" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::remove_last_node</definition>
        <argsstring>()</argsstring>
        <name>remove_last_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes last child of the node. If node has no children, behaviour is undefined. Use <ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node()</ref> to test if node has children. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1155" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1155" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a98289923eb9e8889418a9eb0207ea35c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::remove_node</definition>
        <argsstring>(xml_node&lt; Ch &gt; *where)</argsstring>
        <name>remove_node</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Removes specified child from the node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1171" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1171" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a95735358b079ae0adcfbbac69aa1fbc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::remove_all_nodes</definition>
        <argsstring>()</argsstring>
        <name>remove_all_nodes</name>
        <briefdescription>
<para>Removes all child nodes (but not attributes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1188" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1188" bodyend="1193"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a8b62ee76489faf8e2d1210869d547684" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::prepend_attribute</definition>
        <argsstring>(xml_attribute&lt; Ch &gt; *attribute)</argsstring>
        <name>prepend_attribute</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__attribute" kindref="compound">xml_attribute</ref>&lt; Ch &gt; *</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepends a new attribute to the node. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute to prepend. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1197" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1197" bodyend="1213"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a33ce3386f8c42dd4db658b75cbb6e6c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::append_attribute</definition>
        <argsstring>(xml_attribute&lt; Ch &gt; *attribute)</argsstring>
        <name>append_attribute</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__attribute" kindref="compound">xml_attribute</ref>&lt; Ch &gt; *</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends a new attribute to the node. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1217" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1217" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a9fe659cdf4a5b3bbf5e8ffc98db5a84f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::insert_attribute</definition>
        <argsstring>(xml_attribute&lt; Ch &gt; *where, xml_attribute&lt; Ch &gt; *attribute)</argsstring>
        <name>insert_attribute</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__attribute" kindref="compound">xml_attribute</ref>&lt; Ch &gt; *</type>
          <declname>where</declname>
        </param>
        <param>
          <type><ref refid="classrapidxml_1_1xml__attribute" kindref="compound">xml_attribute</ref>&lt; Ch &gt; *</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts a new attribute at specified place inside the node. All attributes after and including the specified attribute are moved one position back. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>Place where to insert the attribute, or 0 to insert at the back. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute to insert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1239" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1239" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1aa95192d2a165cca16c551ed2a2a06aec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::remove_first_attribute</definition>
        <argsstring>()</argsstring>
        <name>remove_first_attribute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes first attribute of the node. If node has no attributes, behaviour is undefined. Use <ref refid="classrapidxml_1_1xml__node_1ae426802be58114ffc41bf30ac6b8c37d" kindref="member">first_attribute()</ref> to test if node has attributes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1260" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1260" bodyend="1272"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a1781a2cbedc9a51d609ad5b528125635" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::remove_last_attribute</definition>
        <argsstring>()</argsstring>
        <name>remove_last_attribute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes last attribute of the node. If node has no attributes, behaviour is undefined. Use <ref refid="classrapidxml_1_1xml__node_1ae426802be58114ffc41bf30ac6b8c37d" kindref="member">first_attribute()</ref> to test if node has attributes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1277" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1277" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1a6f97b1b4f46a94a4587915df3c0c6b57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::remove_attribute</definition>
        <argsstring>(xml_attribute&lt; Ch &gt; *where)</argsstring>
        <name>remove_attribute</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__attribute" kindref="compound">xml_attribute</ref>&lt; Ch &gt; *</type>
          <declname>where</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes specified attribute from node. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to attribute to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1293" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1293" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__node_1aa8d5d9484aa1eb5ff1841a073c84c1aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_node&lt; Ch &gt;::remove_all_attributes</definition>
        <argsstring>()</argsstring>
        <name>remove_all_attributes</name>
        <briefdescription>
<para>Removes all attributes of node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1309" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1309" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1a9a09739310469995db078ebd0da3ed45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Ch *</type>
        <definition>Ch* rapidxml::xml_base&lt; Ch &gt;::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets name of the node. Interpretation of name depends on type of node. Note that name will not be zero-terminated if <ref refid="namespacerapidxml_1af3fc88ba6bee33482a2db81b1da36ea1" kindref="member">rapidxml::parse_no_string_terminators</ref> option was selected during parse. <linebreak/>
<linebreak/>
 Use <ref refid="classrapidxml_1_1xml__base_1a7e7f98b3d01e1eab8dc1ca69aad9af84" kindref="member">name_size()</ref> function to determine length of the name. <simplesect kind="return"><para>Name of node, or empty string if node has no name. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="673" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="673" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1ae55060ae958c6e6465d6c8db852ec6ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_base&lt; Ch &gt;::name</definition>
        <argsstring>(const Ch *name, std::size_t size)</argsstring>
        <name>name</name>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets name of node to a non zero-terminated string. See ownership_of_strings. <linebreak/>
<linebreak/>
 Note that node does not own its name or value, it only stores a pointer to it. It will not delete or otherwise free the pointer on destruction. It is reponsibility of the user to properly manage lifetime of the string. The easiest way to achieve it is to use <ref refid="classrapidxml_1_1memory__pool" kindref="compound">memory_pool</ref> of the document to allocate the string - on destruction of the document the string will be automatically freed. <linebreak/>
<linebreak/>
 Size of name must be specified separately, because name does not have to be zero terminated. Use <ref refid="classrapidxml_1_1xml__base_1a4611ddc82ac83a527c65606600eb2a0d" kindref="member">name(const Ch *)</ref> function to have the length automatically calculated (string must be zero terminated). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of node to set. Does not have to be zero terminated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of name, in characters. This does not include zero terminator, if one is present. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="721" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="721" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1a4611ddc82ac83a527c65606600eb2a0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_base&lt; Ch &gt;::name</definition>
        <argsstring>(const Ch *name)</argsstring>
        <name>name</name>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets name of node to a zero-terminated string. See also ownership_of_strings and <ref refid="classrapidxml_1_1xml__base_1ae55060ae958c6e6465d6c8db852ec6ce" kindref="member">xml_node::name(const Ch *, std::size_t)</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of node to set. Must be zero terminated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="730" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="730" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1a7e7f98b3d01e1eab8dc1ca69aad9af84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t rapidxml::xml_base&lt; Ch &gt;::name_size</definition>
        <argsstring>() const </argsstring>
        <name>name_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets size of node name, not including terminator character. This function works correctly irrespective of whether name is or is not zero terminated. <simplesect kind="return"><para>Size of node name, in characters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="681" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="681" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1adcdaccff61c665f039d9344e447b7445" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Ch *</type>
        <definition>Ch* rapidxml::xml_base&lt; Ch &gt;::value</definition>
        <argsstring>() const </argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets value of node. Interpretation of value depends on type of node. Note that value will not be zero-terminated if <ref refid="namespacerapidxml_1af3fc88ba6bee33482a2db81b1da36ea1" kindref="member">rapidxml::parse_no_string_terminators</ref> option was selected during parse. <linebreak/>
<linebreak/>
 Use <ref refid="classrapidxml_1_1xml__base_1a9fcf201ed0915ac18dd43b0b5dcfaf32" kindref="member">value_size()</ref> function to determine length of the value. <simplesect kind="return"><para>Value of node, or empty string if node has no value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="692" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="692" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1a3b183c2db7022a6d30494dd2f0ac11e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_base&lt; Ch &gt;::value</definition>
        <argsstring>(const Ch *value, std::size_t size)</argsstring>
        <name>value</name>
        <param>
          <type>const Ch *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets value of node to a non zero-terminated string. See ownership_of_strings. <linebreak/>
<linebreak/>
 Note that node does not own its name or value, it only stores a pointer to it. It will not delete or otherwise free the pointer on destruction. It is reponsibility of the user to properly manage lifetime of the string. The easiest way to achieve it is to use <ref refid="classrapidxml_1_1memory__pool" kindref="compound">memory_pool</ref> of the document to allocate the string - on destruction of the document the string will be automatically freed. <linebreak/>
<linebreak/>
 Size of value must be specified separately, because it does not have to be zero terminated. Use <ref refid="classrapidxml_1_1xml__base_1a81e63ec4bfd2d7ef0a6c2ed49be6e623" kindref="member">value(const Ch *)</ref> function to have the length automatically calculated (string must be zero terminated). <linebreak/>
<linebreak/>
 If an element has a child node of type node_data, it will take precedence over element value when printing. If you want to manipulate data of elements using values, use parser flag <ref refid="namespacerapidxml_1ac2d21ef14a4e8936b94aca5d38b1a74d" kindref="member">rapidxml::parse_no_data_nodes</ref> to prevent creation of data nodes by the parser. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value of node to set. Does not have to be zero terminated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of value, in characters. This does not include zero terminator, if one is present. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="751" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="751" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1a81e63ec4bfd2d7ef0a6c2ed49be6e623" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::xml_base&lt; Ch &gt;::value</definition>
        <argsstring>(const Ch *value)</argsstring>
        <name>value</name>
        <param>
          <type>const Ch *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets value of node to a zero-terminated string. See also ownership_of_strings and <ref refid="classrapidxml_1_1xml__base_1a3b183c2db7022a6d30494dd2f0ac11e9" kindref="member">xml_node::value(const Ch *, std::size_t)</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Vame of node to set. Must be zero terminated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="760" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="760" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1a9fcf201ed0915ac18dd43b0b5dcfaf32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t rapidxml::xml_base&lt; Ch &gt;::value_size</definition>
        <argsstring>() const </argsstring>
        <name>value_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets size of node value, not including terminator character. This function works correctly irrespective of whether value is or is not zero terminated. <simplesect kind="return"><para>Size of node value, in characters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="700" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="700" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1a7f31ae930f93852830234db1ae59c4c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_base&lt; Ch &gt;::parent</definition>
        <argsstring>() const </argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets node parent. <simplesect kind="return"><para>Pointer to parent node, or 0 if there is no parent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="770" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="770" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1memory__pool_1a4118581c29ee9a2f6b55ebf7dac185f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::memory_pool&lt; Ch &gt;::allocate_node</definition>
        <argsstring>(node_type type, const Ch *name=0, const Ch *value=0, std::size_t name_size=0, std::size_t value_size=0)</argsstring>
        <name>allocate_node</name>
        <param>
          <type><ref refid="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7c" kindref="member">node_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const Ch *</type>
          <declname>value</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>name_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>value_size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new node from the pool, and optionally assigns name and value to it. If the allocation request cannot be accomodated, this function will throw <computeroutput>std::bad_alloc</computeroutput>. If exceptions are disabled by defining RAPIDXML_NO_EXCEPTIONS, this function will call rapidxml::parse_error_handler() function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of node to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to assign to the node, or 0 to assign no name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to assign to the node, or 0 to assign no value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of name to assign, or 0 to automatically calculate size from name string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of value to assign, or 0 to automatically calculate size from value string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated node. This pointer will never be NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="415" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="415" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1memory__pool_1a3de2a66c983336e006ea3844e244ed30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__attribute" kindref="compound">xml_attribute</ref>&lt; Ch &gt; *</type>
        <definition>xml_attribute&lt;Ch&gt;* rapidxml::memory_pool&lt; Ch &gt;::allocate_attribute</definition>
        <argsstring>(const Ch *name=0, const Ch *value=0, std::size_t name_size=0, std::size_t value_size=0)</argsstring>
        <name>allocate_attribute</name>
        <param>
          <type>const Ch *</type>
          <declname>name</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const Ch *</type>
          <declname>value</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>name_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>value_size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new attribute from the pool, and optionally assigns name and value to it. If the allocation request cannot be accomodated, this function will throw <computeroutput>std::bad_alloc</computeroutput>. If exceptions are disabled by defining RAPIDXML_NO_EXCEPTIONS, this function will call rapidxml::parse_error_handler() function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to assign to the attribute, or 0 to assign no name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to assign to the attribute, or 0 to assign no value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of name to assign, or 0 to automatically calculate size from name string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of value to assign, or 0 to automatically calculate size from value string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated attribute. This pointer will never be NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="447" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="447" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1memory__pool_1a171941b39d55b868358da97462185f58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Ch *</type>
        <definition>Ch* rapidxml::memory_pool&lt; Ch &gt;::allocate_string</definition>
        <argsstring>(const Ch *source=0, std::size_t size=0)</argsstring>
        <name>allocate_string</name>
        <param>
          <type>const Ch *</type>
          <declname>source</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a char array of given size from the pool, and optionally copies a given string to it. If the allocation request cannot be accomodated, this function will throw <computeroutput>std::bad_alloc</computeroutput>. If exceptions are disabled by defining RAPIDXML_NO_EXCEPTIONS, this function will call rapidxml::parse_error_handler() function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>String to initialize the allocated memory with, or 0 to not initialize it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of characters to allocate, or zero to calculate it automatically from source string length; if size is 0, source string must be specified and null terminated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated char array. This pointer will never be NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="476" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="476" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1memory__pool_1a0a10679fc17597d339a0dc107f8a94ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::memory_pool&lt; Ch &gt;::clone_node</definition>
        <argsstring>(const xml_node&lt; Ch &gt; *source, xml_node&lt; Ch &gt; *result=0)</argsstring>
        <name>clone_node</name>
        <param>
          <type>const <ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>result</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clones an <ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref> and its hierarchy of child nodes and attributes. Nodes and attributes are allocated from this memory pool. Names and values are not cloned, they are shared between the clone and the source. Result node can be optionally specified as a second parameter, in which case its contents will be replaced with cloned source node. This is useful when you want to clone entire document. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Node to clone. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Node to put results in, or 0 to automatically allocate result node </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to cloned node. This pointer will never be NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="497" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="497" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1memory__pool_1a84d3d8d2cdfc00501e1dcf26d889ae03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rapidxml::memory_pool&lt; Ch &gt;::set_allocator</definition>
        <argsstring>(alloc_func *af, free_func *ff)</argsstring>
        <name>set_allocator</name>
        <param>
          <type>alloc_func *</type>
          <declname>af</declname>
        </param>
        <param>
          <type>free_func *</type>
          <declname>ff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets or resets the user-defined memory allocation functions for the pool. This can only be called when no memory is allocated from the pool yet, otherwise results are undefined. Allocation function must not return invalid pointer on failure. It should either throw, stop the program, or use <computeroutput>longjmp()</computeroutput> function to pass control to other place of program. If it returns invalid pointer, results are undefined. <linebreak/>
<linebreak/>
 User defined allocation functions must have the following forms: <linebreak/>
<computeroutput> <linebreak/>
void *allocate(std::size_t size); <linebreak/>
void free(void *pointer); </computeroutput><linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>af</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocation function, or 0 to restore default function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ff</parametername>
</parameternamelist>
<parameterdescription>
<para>Free function, or 0 to restore default function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="552" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="552" bodyend="557"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1ae33040bcfa8e5a29dc6f6f130984a981" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void rapidxml::xml_document&lt; Ch &gt;::insert_coded_character</definition>
        <argsstring>(Ch *&amp;text, unsigned long code)</argsstring>
        <name>insert_coded_character</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1511" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1511" bodyend="1554"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1a27aca5bdcb3bfa899f61b17d7f1d3a0d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class StopPred</type>
          </param>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void rapidxml::xml_document&lt; Ch &gt;::skip</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>skip</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1558" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1558" bodyend="1564"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1af86781975cdfff2105fa8c0b49ab4507" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class StopPred</type>
          </param>
          <param>
            <type>class StopPredPure</type>
          </param>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type>Ch *</type>
        <definition>static Ch* rapidxml::xml_document&lt; Ch &gt;::skip_and_expand_character_refs</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>skip_and_expand_character_refs</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1570" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1570" bodyend="1718"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1aaa63a0c7b57ab8fce63d4aebe4da123d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rapidxml::xml_document&lt; Ch &gt;::parse_bom</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>parse_bom</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1725" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1725" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1a0151c52c82ba79ea0605c2facf39c534" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_document&lt; Ch &gt;::parse_xml_declaration</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>parse_xml_declaration</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1738" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1738" bodyend="1769"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1abc287ce83bcb2dc8519e300236004591" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_document&lt; Ch &gt;::parse_comment</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>parse_comment</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1773" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1773" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1a4c613f3a928f763b4c788422edda5860" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_document&lt; Ch &gt;::parse_doctype</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>parse_doctype</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1814" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1814" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1a09e12a4233a07387d4b5a5ad239388aa" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_document&lt; Ch &gt;::parse_pi</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>parse_pi</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1880" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1880" bodyend="1934"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1aec6cedf45179b6378c670bc3ea509e61" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type>Ch</type>
        <definition>Ch rapidxml::xml_document&lt; Ch &gt;::parse_and_append_data</definition>
        <argsstring>(xml_node&lt; Ch &gt; *node, Ch *&amp;text, Ch *contents_start)</argsstring>
        <name>parse_and_append_data</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>Ch *</type>
          <declname>contents_start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1940" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1940" bodyend="1994"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1ab94daeb25e8a1609e31210a45b2afa6c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_document&lt; Ch &gt;::parse_cdata</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>parse_cdata</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="1998" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="1998" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1aea385acd096ab200d63a777d53435ada" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_document&lt; Ch &gt;::parse_element</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>parse_element</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="2037" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="2037" bodyend="2077"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1a5e94cbc9b02e864cb80961ddb8cc63a7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_document&lt; Ch &gt;::parse_node</definition>
        <argsstring>(Ch *&amp;text)</argsstring>
        <name>parse_node</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="2081" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="2081" bodyend="2163"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1aae0a4c2e1972ab9a9e0ce91cf1166ac9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rapidxml::xml_document&lt; Ch &gt;::parse_node_contents</definition>
        <argsstring>(Ch *&amp;text, xml_node&lt; Ch &gt; *node)</argsstring>
        <name>parse_node_contents</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="2167" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="2167" bodyend="2233"/>
      </memberdef>
      <memberdef kind="function" id="classrapidxml_1_1xml__document_1ac0b3cd07b3d5cbaa83762a196c681519" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Flags</declname>
            <defname>Flags</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rapidxml::xml_document&lt; Ch &gt;::parse_node_attributes</definition>
        <argsstring>(Ch *&amp;text, xml_node&lt; Ch &gt; *node)</argsstring>
        <name>parse_node_attributes</name>
        <param>
          <type>Ch *&amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="2237" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="2237" bodyend="2298"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classrapidxml_1_1xml__base_1afd9851ed43e14619db0d7075ef8e9e8a" prot="protected" static="no" mutable="no">
        <type>Ch *</type>
        <definition>Ch* rapidxml::xml_base&lt; Ch &gt;::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="784" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrapidxml_1_1xml__base_1a278a1ea63b0b70219b946cec47fa00ea" prot="protected" static="no" mutable="no">
        <type>Ch *</type>
        <definition>Ch* rapidxml::xml_base&lt; Ch &gt;::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="785" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrapidxml_1_1xml__base_1a5a8c76a7274b4180213796422c4df76f" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t rapidxml::xml_base&lt; Ch &gt;::m_name_size</definition>
        <argsstring></argsstring>
        <name>m_name_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="786" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrapidxml_1_1xml__base_1aa3a49d8ceddb8a8d7edb773a2226b89c" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t rapidxml::xml_base&lt; Ch &gt;::m_value_size</definition>
        <argsstring></argsstring>
        <name>m_value_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="787" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrapidxml_1_1xml__base_1a90d5f660f078f66563fd7b2d8387ccb0" prot="protected" static="no" mutable="no">
        <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
        <definition>xml_node&lt;Ch&gt;* rapidxml::xml_base&lt; Ch &gt;::m_parent</definition>
        <argsstring></argsstring>
        <name>m_parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="788" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="788" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classrapidxml_1_1xml__base_1ad96ff6b1e41dab3ff60b9bc4df769a75" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Ch *</type>
        <definition>static Ch* rapidxml::xml_base&lt; Ch &gt;::nullstr</definition>
        <argsstring>()</argsstring>
        <name>nullstr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="778" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="778" bodyend="782"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class represents root of the DOM hierarchy. It is also an <ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref> and a <ref refid="classrapidxml_1_1memory__pool" kindref="compound">memory_pool</ref> through public inheritance. Use <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">parse()</ref> function to build a DOM tree from a zero-terminated XML text string. <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">parse()</ref> function allocates memory for nodes and attributes by using functions of <ref refid="classrapidxml_1_1xml__document" kindref="compound">xml_document</ref>, which are inherited from <ref refid="classrapidxml_1_1memory__pool" kindref="compound">memory_pool</ref>. To access root node of the document, use the document itself, as if it was an <ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Character type to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="138">
        <label>rapidxml::xml_document&lt; Ch &gt;</label>
        <link refid="classrapidxml_1_1xml__document"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="139">
        <label>rapidxml::xml_node&lt; Ch &gt;</label>
        <link refid="classrapidxml_1_1xml__node"/>
        <childnode refid="140" relation="public-inheritance">
        </childnode>
      </node>
      <node id="141">
        <label>rapidxml::memory_pool&lt; Ch &gt;</label>
        <link refid="classrapidxml_1_1memory__pool"/>
      </node>
      <node id="140">
        <label>rapidxml::xml_base&lt; Ch &gt;</label>
        <link refid="classrapidxml_1_1xml__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="142">
        <label>rapidxml::xml_document&lt; Ch &gt;</label>
        <link refid="classrapidxml_1_1xml__document"/>
        <childnode refid="143" relation="public-inheritance">
        </childnode>
        <childnode refid="145" relation="public-inheritance">
        </childnode>
      </node>
      <node id="143">
        <label>rapidxml::xml_node&lt; Ch &gt;</label>
        <link refid="classrapidxml_1_1xml__node"/>
        <childnode refid="144" relation="public-inheritance">
        </childnode>
      </node>
      <node id="145">
        <label>rapidxml::memory_pool&lt; Ch &gt;</label>
        <link refid="classrapidxml_1_1memory__pool"/>
      </node>
      <node id="144">
        <label>rapidxml::xml_base&lt; Ch &gt;</label>
        <link refid="classrapidxml_1_1xml__base"/>
      </node>
    </collaborationgraph>
    <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="139" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="139" bodyend="-1"/>
    <listofallmembers>
      <member refid="classrapidxml_1_1memory__pool_1a3de2a66c983336e006ea3844e244ed30" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>allocate_attribute</name></member>
      <member refid="classrapidxml_1_1memory__pool_1a4118581c29ee9a2f6b55ebf7dac185f8" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>allocate_node</name></member>
      <member refid="classrapidxml_1_1memory__pool_1a171941b39d55b868358da97462185f58" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>allocate_string</name></member>
      <member refid="classrapidxml_1_1xml__node_1a33ce3386f8c42dd4db658b75cbb6e6c4" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>append_attribute</name></member>
      <member refid="classrapidxml_1_1xml__node_1a8696d098ecc9c4d2a646b43e91d58e31" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>append_node</name></member>
      <member refid="classrapidxml_1_1xml__document_1a826929ff54242532198701f19ff5f83f" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>clear</name></member>
      <member refid="classrapidxml_1_1memory__pool_1a0a10679fc17597d339a0dc107f8a94ac" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>clone_node</name></member>
      <member refid="classrapidxml_1_1xml__node_1adb6ad21a4590cf13d4a6a5036e3cdbbc" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>document</name></member>
      <member refid="classrapidxml_1_1xml__node_1ae426802be58114ffc41bf30ac6b8c37d" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>first_attribute</name></member>
      <member refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>first_node</name></member>
      <member refid="classrapidxml_1_1xml__node_1a9fe659cdf4a5b3bbf5e8ffc98db5a84f" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>insert_attribute</name></member>
      <member refid="classrapidxml_1_1xml__document_1ae33040bcfa8e5a29dc6f6f130984a981" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>insert_coded_character</name></member>
      <member refid="classrapidxml_1_1xml__node_1a666880f42a7e486d78cc45ed51c7c46d" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>insert_node</name></member>
      <member refid="classrapidxml_1_1xml__node_1a50c03f2db3fa51f27a73d86ec29a49d3" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>last_attribute</name></member>
      <member refid="classrapidxml_1_1xml__node_1a2ace550c18cf10da6303773972d7157f" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>last_node</name></member>
      <member refid="classrapidxml_1_1xml__base_1afd9851ed43e14619db0d7075ef8e9e8a" prot="protected" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>m_name</name></member>
      <member refid="classrapidxml_1_1xml__base_1a5a8c76a7274b4180213796422c4df76f" prot="protected" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>m_name_size</name></member>
      <member refid="classrapidxml_1_1xml__base_1a90d5f660f078f66563fd7b2d8387ccb0" prot="protected" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>m_parent</name></member>
      <member refid="classrapidxml_1_1xml__base_1a278a1ea63b0b70219b946cec47fa00ea" prot="protected" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>m_value</name></member>
      <member refid="classrapidxml_1_1xml__base_1aa3a49d8ceddb8a8d7edb773a2226b89c" prot="protected" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>m_value_size</name></member>
      <member refid="classrapidxml_1_1memory__pool_1a0b609da81dff28a19ebd704400788429" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>memory_pool</name></member>
      <member refid="classrapidxml_1_1xml__base_1a9a09739310469995db078ebd0da3ed45" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>name</name></member>
      <member refid="classrapidxml_1_1xml__base_1ae55060ae958c6e6465d6c8db852ec6ce" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>name</name></member>
      <member refid="classrapidxml_1_1xml__base_1a4611ddc82ac83a527c65606600eb2a0d" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>name</name></member>
      <member refid="classrapidxml_1_1xml__base_1a7e7f98b3d01e1eab8dc1ca69aad9af84" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>name_size</name></member>
      <member refid="classrapidxml_1_1xml__node_1ac59af4dd5f0ec715753e42467dff6aed" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>next_sibling</name></member>
      <member refid="classrapidxml_1_1xml__base_1ad96ff6b1e41dab3ff60b9bc4df769a75" prot="protected" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>nullstr</name></member>
      <member refid="classrapidxml_1_1xml__base_1a7f31ae930f93852830234db1ae59c4c4" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parent</name></member>
      <member refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse</name></member>
      <member refid="classrapidxml_1_1xml__document_1aec6cedf45179b6378c670bc3ea509e61" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_and_append_data</name></member>
      <member refid="classrapidxml_1_1xml__document_1aaa63a0c7b57ab8fce63d4aebe4da123d" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_bom</name></member>
      <member refid="classrapidxml_1_1xml__document_1ab94daeb25e8a1609e31210a45b2afa6c" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_cdata</name></member>
      <member refid="classrapidxml_1_1xml__document_1abc287ce83bcb2dc8519e300236004591" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_comment</name></member>
      <member refid="classrapidxml_1_1xml__document_1a4c613f3a928f763b4c788422edda5860" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_doctype</name></member>
      <member refid="classrapidxml_1_1xml__document_1aea385acd096ab200d63a777d53435ada" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_element</name></member>
      <member refid="classrapidxml_1_1xml__document_1a5e94cbc9b02e864cb80961ddb8cc63a7" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_node</name></member>
      <member refid="classrapidxml_1_1xml__document_1ac0b3cd07b3d5cbaa83762a196c681519" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_node_attributes</name></member>
      <member refid="classrapidxml_1_1xml__document_1aae0a4c2e1972ab9a9e0ce91cf1166ac9" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_node_contents</name></member>
      <member refid="classrapidxml_1_1xml__document_1a09e12a4233a07387d4b5a5ad239388aa" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_pi</name></member>
      <member refid="classrapidxml_1_1xml__document_1a0151c52c82ba79ea0605c2facf39c534" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>parse_xml_declaration</name></member>
      <member refid="classrapidxml_1_1xml__node_1a8b62ee76489faf8e2d1210869d547684" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>prepend_attribute</name></member>
      <member refid="classrapidxml_1_1xml__node_1ae86e92908c3eab40bbed8216e4f3f3cb" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>prepend_node</name></member>
      <member refid="classrapidxml_1_1xml__node_1a001ece4e227eebbd6ad0ec7dacf1c00b" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>previous_sibling</name></member>
      <member refid="classrapidxml_1_1xml__node_1aa8d5d9484aa1eb5ff1841a073c84c1aa" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>remove_all_attributes</name></member>
      <member refid="classrapidxml_1_1xml__node_1a95735358b079ae0adcfbbac69aa1fbc3" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>remove_all_nodes</name></member>
      <member refid="classrapidxml_1_1xml__node_1a6f97b1b4f46a94a4587915df3c0c6b57" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>remove_attribute</name></member>
      <member refid="classrapidxml_1_1xml__node_1aa95192d2a165cca16c551ed2a2a06aec" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>remove_first_attribute</name></member>
      <member refid="classrapidxml_1_1xml__node_1a62bf7b276cf7a651a3337f5e0a0ef6ac" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>remove_first_node</name></member>
      <member refid="classrapidxml_1_1xml__node_1a1781a2cbedc9a51d609ad5b528125635" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>remove_last_attribute</name></member>
      <member refid="classrapidxml_1_1xml__node_1a9182512e948ec451a83f116cce7c7674" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>remove_last_node</name></member>
      <member refid="classrapidxml_1_1xml__node_1a98289923eb9e8889418a9eb0207ea35c" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>remove_node</name></member>
      <member refid="classrapidxml_1_1memory__pool_1a84d3d8d2cdfc00501e1dcf26d889ae03" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>set_allocator</name></member>
      <member refid="classrapidxml_1_1xml__document_1a27aca5bdcb3bfa899f61b17d7f1d3a0d" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>skip</name></member>
      <member refid="classrapidxml_1_1xml__document_1af86781975cdfff2105fa8c0b49ab4507" prot="private" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>skip_and_expand_character_refs</name></member>
      <member refid="classrapidxml_1_1xml__node_1a2c6a4315b98bcfa2e04fed3fa1b22c36" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>type</name></member>
      <member refid="classrapidxml_1_1xml__node_1a499bbc9300c1b06821d5c08b24164c68" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>type</name></member>
      <member refid="classrapidxml_1_1xml__base_1adcdaccff61c665f039d9344e447b7445" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>value</name></member>
      <member refid="classrapidxml_1_1xml__base_1a3b183c2db7022a6d30494dd2f0ac11e9" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>value</name></member>
      <member refid="classrapidxml_1_1xml__base_1a81e63ec4bfd2d7ef0a6c2ed49be6e623" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>value</name></member>
      <member refid="classrapidxml_1_1xml__base_1a9fcf201ed0915ac18dd43b0b5dcfaf32" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>value_size</name></member>
      <member refid="classrapidxml_1_1xml__base_1a23e7f7aac02d17a0a01afb597e4b966b" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>xml_base</name></member>
      <member refid="classrapidxml_1_1xml__document_1aae8841b15085ba8f32ff46587ace28f5" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>xml_document</name></member>
      <member refid="classrapidxml_1_1xml__node_1a8bd9019960b90605a45998b661fb1b0e" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>xml_node</name></member>
      <member refid="classrapidxml_1_1memory__pool_1a0a3e82126e59e4077f41e933130bb5a0" prot="public" virt="non-virtual"><scope>rapidxml::xml_document</scope><name>~memory_pool</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
