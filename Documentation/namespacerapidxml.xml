<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="namespacerapidxml" kind="namespace" language="C++">
    <compoundname>rapidxml</compoundname>
    <innerclass refid="classrapidxml_1_1attribute__iterator" prot="public">rapidxml::attribute_iterator</innerclass>
    <innerclass refid="classrapidxml_1_1file" prot="public">rapidxml::file</innerclass>
    <innerclass refid="classrapidxml_1_1memory__pool" prot="public">rapidxml::memory_pool</innerclass>
    <innerclass refid="classrapidxml_1_1node__iterator" prot="public">rapidxml::node_iterator</innerclass>
    <innerclass refid="classrapidxml_1_1parse__error" prot="public">rapidxml::parse_error</innerclass>
    <innerclass refid="classrapidxml_1_1xml__attribute" prot="public">rapidxml::xml_attribute</innerclass>
    <innerclass refid="classrapidxml_1_1xml__base" prot="public">rapidxml::xml_base</innerclass>
    <innerclass refid="classrapidxml_1_1xml__document" prot="public">rapidxml::xml_document</innerclass>
    <innerclass refid="classrapidxml_1_1xml__node" prot="public">rapidxml::xml_node</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7c" prot="public" static="no">
        <name>node_type</name>
        <enumvalue id="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7ca4023b6a1c7059fd8fbec2112d5c35424" prot="public">
          <name>node_document</name>
          <briefdescription>
<para>A document node. Name and value are empty. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7ca89cbeb4d28046326e4ee953d3c4047ff" prot="public">
          <name>node_element</name>
          <briefdescription>
<para>An element node. Name contains element name. Value contains text of first data node. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7ca9d669d8e1f4ba9c7eeada4c14a11ad1d" prot="public">
          <name>node_data</name>
          <briefdescription>
<para>A data node. Name is empty. Value contains data text. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7caccf0b363d3876a3f83ff9b1bcdaaa536" prot="public">
          <name>node_cdata</name>
          <briefdescription>
<para>A CDATA node. Name is empty. Value contains data text. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7ca1a695e1384ec3bd4df3eff65ec609a96" prot="public">
          <name>node_comment</name>
          <briefdescription>
<para>A comment node. Name is empty. Value contains comment text. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7cafe4ca44261e5fbedf0eab43131751212" prot="public">
          <name>node_declaration</name>
          <briefdescription>
<para>A declaration node. Name and value are empty. Declaration parameters (version, encoding and standalone) are in node attributes. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7cadf5002f2efabe231bed01d16f08f832c" prot="public">
          <name>node_doctype</name>
          <briefdescription>
<para>A DOCTYPE node. Name is empty. Value contains DOCTYPE text. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacerapidxml_1abb456db38f7efb746c4330eed6072a7caeb73b472e77347b9aa89525f16493b87" prot="public">
          <name>node_pi</name>
          <briefdescription>
<para>A PI node. Name contains target. Value contains instructions. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumeration listing all node types produced by the parser. Use <ref refid="classrapidxml_1_1xml__node_1a2c6a4315b98bcfa2e04fed3fa1b22c36" kindref="member">xml_node::type()</ref> function to query node type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="144" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="143" bodyend="153"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacerapidxml_1ac2d21ef14a4e8936b94aca5d38b1a74d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_no_data_nodes</definition>
        <argsstring></argsstring>
        <name>parse_no_data_nodes</name>
        <initializer>= 0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to not create data nodes. Text of first data node will still be placed in value of parent element, unless <ref refid="namespacerapidxml_1a00e6fea134b786ea6efeed1c8bc4a668" kindref="member">rapidxml::parse_no_element_values</ref> flag is also specified. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="163" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a00e6fea134b786ea6efeed1c8bc4a668" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_no_element_values</definition>
        <argsstring></argsstring>
        <name>parse_no_element_values</name>
        <initializer>= 0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to not use text of first data node as a value of parent element. Can be combined with other flags by use of | operator. Note that child data nodes of element node take precendence over its value when printing. That is, if element has one or more child data nodes <emphasis>and</emphasis> a value, the value will be ignored. Use <ref refid="namespacerapidxml_1ac2d21ef14a4e8936b94aca5d38b1a74d" kindref="member">rapidxml::parse_no_data_nodes</ref> flag to prevent creation of data nodes if you want to manipulate data using values of elements. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="172" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1af3fc88ba6bee33482a2db81b1da36ea1" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_no_string_terminators</definition>
        <argsstring></argsstring>
        <name>parse_no_string_terminators</name>
        <initializer>= 0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to not place zero terminators after strings in the source text. By default zero terminators are placed, modifying source text. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="179" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a89113c103ffaf77615d1aa330c8dcca8" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_no_entity_translation</definition>
        <argsstring></argsstring>
        <name>parse_no_entity_translation</name>
        <initializer>= 0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to not translate entities in the source text. By default entities are translated, modifying source text. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="186" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a22d4aefaceb00d7afabfef7107b108da" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_no_utf8</definition>
        <argsstring></argsstring>
        <name>parse_no_utf8</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to disable UTF-8 handling and assume plain 8 bit characters. By default, UTF-8 handling is enabled. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="193" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a999d782659513f8015ea4236e3204c42" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_declaration_node</definition>
        <argsstring></argsstring>
        <name>parse_declaration_node</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to create XML declaration node. By default, declaration node is not created. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="200" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1ae093dd49e2f59fa39eee95f1a6568e32" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_comment_nodes</definition>
        <argsstring></argsstring>
        <name>parse_comment_nodes</name>
        <initializer>= 0x40</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to create comments nodes. By default, comment nodes are not created. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="207" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a41002b49780a90a0bbcc28ce8b895fe4" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_doctype_node</definition>
        <argsstring></argsstring>
        <name>parse_doctype_node</name>
        <initializer>= 0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to create DOCTYPE node. By default, doctype node is not created. Although W3C specification allows at most one DOCTYPE node, RapidXml will silently accept documents with more than one. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="215" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a03fe68fcf5d28f38476e0fd31adecc4c" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_pi_nodes</definition>
        <argsstring></argsstring>
        <name>parse_pi_nodes</name>
        <initializer>= 0x100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to create PI nodes. By default, PI nodes are not created. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="222" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a7ce8f40fda68338e20b56f41e48e49f3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_validate_closing_tags</definition>
        <argsstring></argsstring>
        <name>parse_validate_closing_tags</name>
        <initializer>= 0x200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to validate closing tag names. If not set, name inside closing tag is irrelevant to the parser. By default, closing tags are not validated. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="230" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a61912424b47db5038e726d4e1c22417f" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_trim_whitespace</definition>
        <argsstring></argsstring>
        <name>parse_trim_whitespace</name>
        <initializer>= 0x400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to trim all leading and trailing whitespace of data nodes. By default, whitespace is not trimmed. This flag does not cause the parser to modify source text. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="238" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a31f33885defb5176a7d99e524c35d386" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_normalize_whitespace</definition>
        <argsstring></argsstring>
        <name>parse_normalize_whitespace</name>
        <initializer>= 0x800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flag instructing the parser to condense all whitespace runs of data nodes to a single space character. Trimming of leading and trailing whitespace of data is controlled by <ref refid="namespacerapidxml_1a61912424b47db5038e726d4e1c22417f" kindref="member">rapidxml::parse_trim_whitespace</ref> flag. By default, whitespace is not normalized. If this flag is specified, source text will be modified. Can be combined with other flags by use of | operator. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="247" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1acf4edf952f59eb1b6124ea37ad7da3ab" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_default</definition>
        <argsstring></argsstring>
        <name>parse_default</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse flags which represent default behaviour of the parser. This is always equal to 0, so that all other flags can be simply ored together. Normally there is no need to inconveniently disable flags by anding with their negated (~) values. This also means that meaning of each flag is a <emphasis>negation</emphasis> of the default setting. For example, if flag name is <ref refid="namespacerapidxml_1a22d4aefaceb00d7afabfef7107b108da" kindref="member">rapidxml::parse_no_utf8</ref>, it means that utf-8 is <emphasis>enabled</emphasis> by default, and using the flag will disable it. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="259" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a45d4d8fef551beaaba23a83b847fd6a3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_non_destructive</definition>
        <argsstring></argsstring>
        <name>parse_non_destructive</name>
        <initializer>= <ref refid="namespacerapidxml_1af3fc88ba6bee33482a2db81b1da36ea1" kindref="member">parse_no_string_terminators</ref> | <ref refid="namespacerapidxml_1a89113c103ffaf77615d1aa330c8dcca8" kindref="member">parse_no_entity_translation</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A combination of parse flags that forbids any modifications of the source text. This also results in faster parsing. However, note that the following will occur: <itemizedlist>
<listitem>
<para>names and values of nodes will not be zero terminated, you have to use <ref refid="classrapidxml_1_1xml__base_1a7e7f98b3d01e1eab8dc1ca69aad9af84" kindref="member">xml_base::name_size()</ref> and <ref refid="classrapidxml_1_1xml__base_1a9fcf201ed0915ac18dd43b0b5dcfaf32" kindref="member">xml_base::value_size()</ref> functions to determine where name and value ends </para></listitem>
<listitem>
<para>entities will not be translated </para></listitem>
<listitem>
<para>whitespace will not be normalized </para></listitem>
</itemizedlist>
See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="269" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a64da06dfdab7c86ca954bda4fecb978f" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_fastest</definition>
        <argsstring></argsstring>
        <name>parse_fastest</name>
        <initializer>= <ref refid="namespacerapidxml_1a45d4d8fef551beaaba23a83b847fd6a3" kindref="member">parse_non_destructive</ref> | <ref refid="namespacerapidxml_1ac2d21ef14a4e8936b94aca5d38b1a74d" kindref="member">parse_no_data_nodes</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A combination of parse flags resulting in fastest possible parsing, without sacrificing important data. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="274" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1abb48dc65db75d9e49734bc5bd2fabbfc" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::parse_full</definition>
        <argsstring></argsstring>
        <name>parse_full</name>
        <initializer>= <ref refid="namespacerapidxml_1a999d782659513f8015ea4236e3204c42" kindref="member">parse_declaration_node</ref> | <ref refid="namespacerapidxml_1ae093dd49e2f59fa39eee95f1a6568e32" kindref="member">parse_comment_nodes</ref> | <ref refid="namespacerapidxml_1a41002b49780a90a0bbcc28ce8b895fe4" kindref="member">parse_doctype_node</ref> | <ref refid="namespacerapidxml_1a03fe68fcf5d28f38476e0fd31adecc4c" kindref="member">parse_pi_nodes</ref> | <ref refid="namespacerapidxml_1a7ce8f40fda68338e20b56f41e48e49f3" kindref="member">parse_validate_closing_tags</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A combination of parse flags resulting in largest amount of data being extracted. This usually results in slowest parsing. <linebreak/>
<linebreak/>
 See <ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">xml_document::parse()</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="280" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacerapidxml_1a65477b812a80f5bda693ec57e57de064" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rapidxml::print_no_indenting</definition>
        <argsstring></argsstring>
        <name>print_no_indenting</name>
        <initializer>= 0x1</initializer>
        <briefdescription>
<para>Printer flag instructing the printer to suppress indenting of XML. See <ref refid="namespacerapidxml_1a0fb0be6eba49fb2e2646d5a72a0dc355" kindref="member">print()</ref> function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml_print.hpp" line="23" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml_print.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerapidxml_1a0fb0be6eba49fb2e2646d5a72a0dc355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OutIt</type>
          </param>
          <param>
            <type>class Ch</type>
          </param>
        </templateparamlist>
        <type>OutIt</type>
        <definition>OutIt rapidxml::print</definition>
        <argsstring>(OutIt out, const xml_node&lt; Ch &gt; &amp;node, int flags=0)</argsstring>
        <name>print</name>
        <param>
          <type>OutIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints XML to given output iterator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output iterator to print to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Node to be printed. Pass <ref refid="classrapidxml_1_1xml__document" kindref="compound">xml_document</ref> to print entire document. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags controlling how XML is printed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output iterator pointing to position immediately after last character of printed text. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml_print.hpp" line="388" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml_print.hpp" bodystart="388" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="namespacerapidxml_1a0d2e114d5dd85e13c23b8dab600720fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ch</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Ch &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Ch&gt;&amp; rapidxml::print</definition>
        <argsstring>(std::basic_ostream&lt; Ch &gt; &amp;out, const xml_node&lt; Ch &gt; &amp;node, int flags=0)</argsstring>
        <name>print</name>
        <param>
          <type>std::basic_ostream&lt; Ch &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints XML to given output stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream to print to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Node to be printed. Pass <ref refid="classrapidxml_1_1xml__document" kindref="compound">xml_document</ref> to print entire document. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags controlling how XML is printed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml_print.hpp" line="401" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml_print.hpp" bodystart="401" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="namespacerapidxml_1a9ed8e626dd81348caede1f92a6c8418a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ch</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Ch &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Ch&gt;&amp; rapidxml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Ch &gt; &amp;out, const xml_node&lt; Ch &gt; &amp;node)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Ch &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints formatted XML to given output stream. Uses default printing flags. Use <ref refid="namespacerapidxml_1a0fb0be6eba49fb2e2646d5a72a0dc355" kindref="member">print()</ref> function to customize printing process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream to print to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Node to be printed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output stream. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml_print.hpp" line="401" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml_print.hpp" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="namespacerapidxml_1a21c1cf2814019385e6b8d09e75af1d34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ch</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t rapidxml::count_children</definition>
        <argsstring>(xml_node&lt; Ch &gt; *node)</argsstring>
        <name>count_children</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts children of node. Time complexity is O(n). <simplesect kind="return"><para>Number of children of node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml_utils.hpp" line="93" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml_utils.hpp" bodystart="93" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacerapidxml_1a6255d15e5d8ad12ebcd7c60da51c97e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ch</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t rapidxml::count_attributes</definition>
        <argsstring>(xml_node&lt; Ch &gt; *node)</argsstring>
        <name>count_attributes</name>
        <param>
          <type><ref refid="classrapidxml_1_1xml__node" kindref="compound">xml_node</ref>&lt; Ch &gt; *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts attributes of node. Time complexity is O(n). <simplesect kind="return"><para>Number of attributes of node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml_utils.hpp" line="108" column="1" bodyfile="/Users/NateOToole/FinalProject/FinalProject/rapidxml_utils.hpp" bodystart="108" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/NateOToole/FinalProject/FinalProject/rapidxml.hpp" line="58" column="1"/>
  </compounddef>
</doxygen>
